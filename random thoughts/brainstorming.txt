======
PanthR
======

PanthR is a free web-based tool for statistics. It utilizes HTML5 and Javascript to create a rich environment and perform most statistical computations, at the same time linking to an R backend for more heavy duty tasks.

PanthR consists of 3 logical components:

- A `Web Client`_ written in Javascript. This client utilizes Webworkers threads to manage dataset computations. It manages datasets, graphs and other reports. It can work "offline", or by linking to a server.
- A `Web Server`_ that locally connects to a local R server. The server receives client requests, creates a separate "id" for each client, delegates tasks to the R server, and sends results back to the client. Multiple organizations can run private or public servers, providing size limits for how many clients they can serve. The main page of the PanthR project should keep a list of all those "public mirrors", allowing clients to choose which mirror to try to connect to. Possibly implemented in Node.js.
- An established `API`_ for the communication between client and server. This interface should contain a rich enough syntax to allow the description of any typical task related to a dataset. It should probably contain a versioning system, allowing the possibility of updating the interface to offer more functionality. A client/server could then decide what level of this interface to support.

Web Client
----------

The web client provides an interface to users for performing statistics. It can run on its own with limited functionality, or connect to a web server to utilize R's computing power. The main components of the web client would be as follows:

- The main UI. It should contain:
    Login Menu
        Allows connecting to a background server, with optional login credentials, or offline work. Should sit in the top right of the screen.
    Data Editor View
        Typical editable spreadsheet view of the data. Should offer basic sorting (and optionally filtering/searching) functionality. This should be one of several main views the user can switch to. The user should be able to hide/reorder variables.
    Summary View
        Provides brief summary of the data set, e.g. descriptives of each variable. This should be one of several main views the user can switch to. Probably use the List Inlay pattern.
    Active Element Info
        Shows information on the currently selected column and element. E.g. basic variable summaries, z-scores for that value within its column, basic graph, etc. This should probably be optional.
    Application Menu
        Typical menu where users can select commands to execute. Consider using Fat Menus. Would probably contain the following menus:
        - File: New, Open, Save, Import, Export
        - Data: New Variable, New Filter
        - Reports: Graph, Table, Test
        - Settings: Graph, Table, Test, Save, Load
    Filters List
        Contains information about all filters on the data. Includes both active and non/active filters. Users can activate/deactivate filters, create new filters, remove existing filters, rename filters. Filters would be expressions that select a subset of rows. Probably implemented by a List Inlay pattern.
    Reports List
        List Inlay of the selected reports for this dataset. Each report can be clicked for a bigger version, saved/exported. Ideally should be able to set some custom settings on it. Reports can be Graphs, Tables, Tests.

Web Server
----------

The Web Server maintains a permanent link to a local R process (likely RServe ?). It contains the following:

- A configuration file that administrators can use to detail information about the server. See the ``/status`` request below for required fields. The server process will look for configuration files of names ``panthr_config.ext`` where ext is in order: ``json``, ``yaml``, ``xml``. The first configuration found will be used.
- An RServe process, that is started from the server process and links to it. The server process is responsible for tearing down the RServe process.
- The server process. The server process needs to do the following:
    - Maintain a list of current clients and corresponding ids. Upon establishing a connection, each client is assigned a randomly generated 16 digit hexadecimal id, which is used to identify the client in future communications. It is also used as a 'namespace' identifier to separate data on the R server corresponding to different clients.
    - The list maintains information on the time that the client established a connection, as well as the time when the client last communicated with the server. Based on this and configuration settings, the server decides when to disconnect a client.
    - Non-public servers can also link to a database process where they can store information on their clients, save certain datasets, etc.
    - Public servers purge all client related information upon disconnecting with a client.
    - Servers pass most ``/data`` requests to the R server. The API for these requests is described further in the `API`_ section.

In theory, servers could be written that link to other software rather than R. As long as they support the `API`_.

Requests Served
~~~~~~~~~~~~~~~

``/status``
    A GET request, returns information about the server, containing the following fields (This information should probably be saved in a configuration file).

    :name:
        How the server wants to be known to the world.
    :owner:
        The person or organization managing the server. Optional.
    :location:
        Physical location of the server (city/state?).
    :server_version:
        Version of the server program. This will follows a standard digit.digit format.
    :api_version:
        The highest version of the API that this server supports. To account for future expansions.
    :public:
        Whether the server is meant to be available to anyone who might want to use it. Public servers to not preserve any client data once a timeout occurs, or once the maximum time is exceeded.
    :timeout:
        Number of seconds of inactivity that would cause a server to disconnect from a client. Should default to two hours (7200).
    :max_time:
        Should default to one day (86400).
    :auth:
        Protocol required for authentication. Will need to identify meaningful values. A value of 'none' should mean that no authentication is necessary. 'none' should be the default value for public servers.
    :max_clients:
        The number of clients that can be serviced at any given time. An integer.
    :no_clients:
        Current number of active clients.


``/ping``
    A GET request from a client, to establish a connection to the server. The request may contain:

    :id:
        An existing id for this client, likely obtained during a previous request. IDs are 16-digit hexadecimals. Lack of this field will establish a new connection.
    
    - A successful connection should return a 200 status code, and the message text should contain the 16 digit ID key to be used by the client in any future communication.
    - If the server cannot accept any new clients at this time, it should return a 503 status code.
    - A failed authentication would return a 401 status code.

``/data``
    Typically a POST request from a client, requesting actual some work from the server. Detailed in the `API`_ section. These requests form the majority of client/server communication. The client would use this request to inform the server of a change in the data set, or to request some computations from the server. Clients should try to chain requests together, to minimize the communication overhead.
    If a disconnected client attempts a ``/data`` request, a 403 status code should be returned.


API
---

Data communication takes place in JSON format. Each JSON object needs to contain the following keys:

    :id:
        The established id for the client.
    :commands:
        An array of one more more objects, each representing a "command". The various available commands listed below.
        We need to arrange things so that addons can create new commands. Ideally this should be done in two levels, in Javascript as well as R.

Commands
~~~~~~~~
Each command has a specific list of expected keys. Any other keys will be ignored. Commands fit in two main types: Structures, and Executes. All commands are represented in the API as a JSON object, with the ``command`` key holding the command's name.

Structures
++++++++++
Structures are used to store information. They all contain the ``name`` key, which is used to refer to them from other variables. Internally, all these structures should be following an "observable" pattern, so other entities can be notified of any changes. This information does not have to be part of the published API though.

:vector:
    Typical building block, represents a variable. Vectors can be either "static", where a list of *values* is specified, or "dynamic" where a process for computing them is provided. Vectors would contain the following keys:

    :name:
        Name for the variable. Need to specify rules for how this is converted to a valid R variable name.
    :label:
        Longer name for the variable. Used on graphs and tables. *Optional*
    :values:
        An array of the vector's values, used for static variables. How they are interpreted depends on the vector's type. These values will be strings in the case of nominal variables only, otherwise they are numeric. Empty, undefined and null values are all treated as missing values. *A vector needs to have either* values *or* formula *specified.*
    :formula:
        Used for dynamically computed vectors. Should be a string representing a function that would compute the variable. Should spell out in a different section the allowed operators/functions.
    :formula_native:
        Should be used by the different implementations for holding a "compiled" version of the function computing the variable. Should be ignored during data transfer.
    :missing:
        An array of values that will be treated as missing values. *Optional*
    :type:
        The type of variable: ordinal, nominal, scalar, datetime. The type of variable determines the remaining keys:
    
        ``scalar:``
        
            :decimals:
                Number of decimal points.
        
        ``ordinal:``
        
            :labels:
                An array of the value labels for the numbers appearing in the values array, starting with the label for the number 1.
        
        ``datetime:``
            Date values are represented as seconds from the beginning of 1970 UTC, also known as Unix Epoch.
            
            :timezone:
                Need to find a way to represent this
                
            :format:
                A string representing how the datetime values should be formatted. Need to provide some rules here, but should probably follow a subset of C's strformat. Initial suggestion:
                
                :y:
                    Year, 2 digits
                :Y:
                    Year, 4 digits
                :b:
                    Month, abbreviated
                :B:
                    Month, long
                :m:
                    Month, numeric
                :d:
                    Day of month, numeric
                :a:
                    Weekday, abbreviated
                :A:
                    Weekday, full
                :H:
                    Hours, 24hour clock
                :I:
                    Hours, 12hour clock
                :M:
                    Minutes
                :S:
                    Seconds
                :p:
                    a.m. or p.m.
                :others:
                    inserted as is

:dataset:
    Organizational structure to hold variable vectors together.
    
    :name:
        Name of the data set
    :label:
        Used in graphs/tables/tests
    :variables:
        Array of the variable vectors in the dataset. Could contain either the objects themselves or the names of the variables.
    :filters:
        Array of the names of filters currently active in the dataset.

:filter:
    Filters are expressions that can be used to select a subset of the rows in the dataset.
    
    :name:
        Name for the filter, that can be used to refer to it.
    :label:
        Used on visualizations of the filter.
    :variables:
        Array of names of the variables involved in this filter's formula
    :formula:
        A string describing a boolean-valued function determining the rows to be filtered.
    :formula_native:
        A native implementation of the formula. Not for transmission.

:report:
    A report of descriptives or frequencies for a part of the dataset. TODO: Need to add some examples of the report syntax.
    
    :name:
        Name of the table, used to refer to it internally.
    :label:
        Visual title for the table.
    :type:
        The type of report. We need to expand on this. For now: ``frequency``, ``descriptives``. The remaining keys partly depend on the type.
    :variables:
        Array of names of one or more variables that the report refers to. Used to determine the variables on the rows of the table.
    :panel_variables:
        Array of names of variables to be used as panel variables. A separate table will be created for each category combination from these variables.
    :targets:
        Array of expressions to be used for producing the table's columns. Each expression can be either a variable, in which case the appropriate values from that variable are added together to produce the column's values, or an object with a single key. The key is used as the name for the column, while the key's value is a function whose evaluation produces the column's value.

:graph:
    Generic structure representing graphs.
    
    :name:
        Used internally.
    :label:
        Graph Title.
    :type:
        Principal type of graph. Other components can be added, but this determines the basic look. Possible types: ``scatter``, ``bar``, ``dot``, ``box``, ``hist``, ``quantile``. Should add more in the future.
    :variables:
        A vector of 2 names of variables to be used for the x and y axes respectively. If a third variable is present, it will be used a a grouping variable.
    :panel_variables:
        Array of names of variables used to create separate panels. First entry represents column panels, second entry row panels, higher entries produce multiple graphs. Use NULL to skip entries.
    :xaxis:
        Object representing details of the x-axis, to overwrite default choices. The defautl options are determined from the variable representing the x-axis. Possible keys:
        
        :label:
            Used to overwrite the x-axis label.
        :limits:
            Vector of length 2 containing explicit range endpoints.
        :ticks:
            Either a vector containing the tick points or an object containing ``values`` and ``labels``.
    
    :yaxis:
        Same as ``xaxis``.
    :components:
        An array of extra "components" to add. Each array entry should be a ``graph_comp``.
    :graph_settings:
        A ``graph_settings`` object, sets parameters for colors, line widths, lengths etc.

:graph_settings:
    TODO

:graph_comp:
    These are individual components to be tacked on existing graphs.
    
    :type:
        One of: ``grid``, ``abline``, ``legend``, ``fit``, ``labels``. Possibly should add more. The remaining options depend on the type.
    TODO

